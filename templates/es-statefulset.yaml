apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
  labels:
    {{- include "log.selectorLabels" . | nindent 4 }}
    app: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
spec:
  serviceName: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
  replicas: {{ .Values.elasticsearch.replicas }}
  selector:
    matchLabels:
      {{- include "log.selectorLabels" . | nindent 6 }}
      app: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
  template:
    metadata:
      labels:
        {{- include "log.selectorLabels" . | nindent 8 }}
        app: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
    spec:
      {{- include "log.imagePullSecrets" . | indent 6 }}
      serviceAccountName: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
      # Elasticsearch requires vm.max_map_count to be at least 262144.
      # If your OS already sets up this number to a higher value, feel free
      # to remove this init container.
      initContainers:
        - image: alpine:3.6
          command: ["/sbin/sysctl", "-w", "vm.max_map_count=262144"]
          name: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}-init
          securityContext:
            privileged: true
      containers:
        - image: {{ template "elasticsearch.image" . }}
          name: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
          imagePullPolicy: {{ .Values.elasticsearch.image.pullPolicy | quote }}
          env:
            - name: "NAMESPACE"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          resources:
            # need more cpu upon initialization, therefore burstable class
            limits:
              cpu: 1000m
            requests:
              cpu: 100m
          ports:
            - containerPort: 9200
              name: db
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: transport
            initialDelaySeconds: 90
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            tcpSocket:
              port: transport
            initialDelaySeconds: 90
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          volumeMounts:
            - name: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
              mountPath: /data
      volumes:
{{- if and .Values.elasticsearch.persistence.enabled .Values.elasticsearch.persistence.existingClaim }}
        - name: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
          persistentVolumeClaim:
{{- with .Values.elasticsearch.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
{{- end }}
{{- else if not .Values.elasticsearch.persistence.enabled }}
        - name: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
          emptyDir: {}
{{- else if and .Values.elasticsearch.persistence.enabled (not .Values.elasticsearch.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "log.fullname" . }}-{{ .Values.elasticsearch.name }}
      {{- with .Values.elasticsearch.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.elasticsearch.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.elasticsearch.persistence.size | quote }}
        {{ include "elasticsearch.storageClass" . }}
{{- end }}
